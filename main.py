import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
import asyncio
from aiogram.filters import Command, CommandObject

token = open('token.txt').readline()

users = {}

async def handle_start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –≤–æ–≤—Ä–µ–º—è\n\n' +
                         '–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n' +
                         '‚Ä¢ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \n' +
                         '/add {–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞}, {–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –æ–¥–∏–Ω –ø—Ä–∏—ë–º —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è}, '
                         '{–í—Ä–µ–º—è}, {–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏—ë–º–∞}\n' +
                         '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —è –±—É–¥—É –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏—ë–º–µ –¥–∞–Ω–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞\n' +
                         '–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /add –ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª, 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 10:00, 3\n' +
                         '‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /show\n' +
                         '‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                         '/del {–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /show}\n')


async def handle_delete(message: Message, command: CommandObject):
    try:
        pill_id_to_del = int(command.args)
        user_id = message.from_user.id
        current_answer = ' '
        if user_id in users:
            if (('pills' in users[user_id]) and
                    (users[user_id]['pills'] != {})):
                if (pill_id_to_del in users[user_id]['pills']):
                    del users[user_id]['pills'][pill_id_to_del]
                    current_answer = "–ü—Ä–µ–ø–∞—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                else:
                    current_answer = "–£–∫–∞–∑–∞–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!"
            else:
                current_answer = '–ù–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ü•≥'
        else:
            current_answer = '–ù–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ü•≥'
        await message.answer(current_answer)
    except Exception as e:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /del –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!")


async def handle_show(message: Message):
    current_answer = '–ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –≤–∞–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:\n'
    current_answer += '<b>–§–æ—Ä–º–∞—Ç: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä) –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –æ–¥–∏–Ω –ø—Ä–∏—ë–º —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –í—Ä–µ–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏—ë–º–∞</b>\n\n'
    user_id = message.from_user.id
    if user_id in users:
        if len(users[user_id]['pills']):
            for id in users[user_id]['pills']:
                current_answer += f'{id}) ' + ', '.join(str(x) for x in users[user_id]['pills'][id]) + '\n'
        else:
            current_answer = '–ù–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ü•≥'
    else:
        current_answer = '–ù–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ü•≥'
    await message.answer(current_answer, parse_mode='HTML')


# {–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞} {–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞} {–í—Ä–µ–º—è} {–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏—ë–º–∞}
async def handle_add_reminder(message: Message, command: CommandObject):
    try:
        parts_of_text = command.args.split(',')
        parts_of_text = [x.strip() for x in parts_of_text]
        pill_name = parts_of_text[0]
        pill_dose = parts_of_text[1]
        pill_time = parts_of_text[2]
        pill_days = int(parts_of_text[3])
        user_id = message.from_user.id
        current_pill_id = None
        if (user_id not in users) or (users[user_id]['pills'] == {}):
            users[user_id] = {
                'pills': {
                    1: [pill_name, pill_dose, pill_time, pill_days]
                }
            }
            current_pill_id = 1
        else:
            current_pill_id = max(users[user_id]['pills'].keys()) + 1
            users[user_id]['pills'][current_pill_id] = [pill_name, pill_dose, pill_time, pill_days]

        await message.answer("–ü—Ä–µ–ø–∞—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

        pill_time_hour, pill_time_minute = (int(x) for x in pill_time.split(":"))
        for i in range(pill_days):
            now = datetime.datetime.now()
            next_reminder = datetime.datetime(now.year, now.month, now.day, pill_time_hour, pill_time_minute, now.second)
            if (next_reminder > now):
                delay = (next_reminder - now).seconds
            else:
                next_reminder += datetime.timedelta(days=1)
                delay = (next_reminder - now).seconds
            await asyncio.sleep(delay)
            if (current_pill_id in users[user_id]['pills']):
                users[user_id]['pills'][current_pill_id][3] -= 1
                await message.answer(f'‚ùó {message.from_user.first_name}, –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç "{pill_name}", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pill_dose} ‚ùó')
            else:
                break
        if current_pill_id in users[user_id]['pills']:
            del users[user_id]['pills'][current_pill_id]
    except Exception as e:
        await message.answer(f'–ö–æ–º–∞–Ω–¥–∞ /add –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


async def start():
    bot = Bot(token=token)
    dp = Dispatcher()
    dp.message.register(handle_start, Command(commands='start'))
    dp.message.register(handle_add_reminder, Command(commands='add'))
    dp.message.register(handle_show, Command(commands='show'))
    dp.message.register(handle_delete, Command(commands='del'))
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(start())
